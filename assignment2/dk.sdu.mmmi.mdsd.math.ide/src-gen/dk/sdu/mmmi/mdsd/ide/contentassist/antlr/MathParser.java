/*
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.mmmi.mdsd.ide.contentassist.antlr.internal.InternalMathParser;
import dk.sdu.mmmi.mdsd.services.MathGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MathParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MathGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MathGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives_1(), "rule__Type__Alternatives_1");
			builder.put(grammarAccess.getPlusMinusAccess().getAlternatives_1(), "rule__PlusMinus__Alternatives_1");
			builder.put(grammarAccess.getTermAccess().getAlternatives_1(), "rule__Term__Alternatives_1");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getBindingAccess().getAlternatives(), "rule__Binding__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getExternalAccess().getGroup(), "rule__External__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
			builder.put(grammarAccess.getVarAccess().getGroup(), "rule__Var__Group__0");
			builder.put(grammarAccess.getLetAccess().getGroup(), "rule__Let__Group__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup(), "rule__PlusMinus__Group__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1_0(), "rule__PlusMinus__Group_1_0__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1_1(), "rule__PlusMinus__Group_1_1__0");
			builder.put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
			builder.put(grammarAccess.getTermAccess().getGroup_1_0(), "rule__Term__Group_1_0__0");
			builder.put(grammarAccess.getTermAccess().getGroup_1_1(), "rule__Term__Group_1_1__0");
			builder.put(grammarAccess.getExternalContentAccess().getGroup(), "rule__ExternalContent__Group__0");
			builder.put(grammarAccess.getExternalContentAccess().getGroup_2(), "rule__ExternalContent__Group_2__0");
			builder.put(grammarAccess.getExternalContentAccess().getGroup_2_1(), "rule__ExternalContent__Group_2_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getParenthesisAccess().getGroup(), "rule__Parenthesis__Group__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getExternalsAssignment_2(), "rule__Program__ExternalsAssignment_2");
			builder.put(grammarAccess.getProgramAccess().getExpAssignment_3(), "rule__Program__ExpAssignment_3");
			builder.put(grammarAccess.getExternalAccess().getNameAssignment_1(), "rule__External__NameAssignment_1");
			builder.put(grammarAccess.getExternalAccess().getParenAssignment_3(), "rule__External__ParenAssignment_3");
			builder.put(grammarAccess.getTypeAccess().getNameAssignment_0(), "rule__Type__NameAssignment_0");
			builder.put(grammarAccess.getVarAccess().getNameAssignment_1(), "rule__Var__NameAssignment_1");
			builder.put(grammarAccess.getVarAccess().getExpressionAssignment_3(), "rule__Var__ExpressionAssignment_3");
			builder.put(grammarAccess.getLetAccess().getNameAssignment_1(), "rule__Let__NameAssignment_1");
			builder.put(grammarAccess.getLetAccess().getBindingAssignment_3(), "rule__Let__BindingAssignment_3");
			builder.put(grammarAccess.getLetAccess().getBodyAssignment_5(), "rule__Let__BodyAssignment_5");
			builder.put(grammarAccess.getPlusMinusAccess().getRightAssignment_1_0_2(), "rule__PlusMinus__RightAssignment_1_0_2");
			builder.put(grammarAccess.getPlusMinusAccess().getRightAssignment_1_1_2(), "rule__PlusMinus__RightAssignment_1_1_2");
			builder.put(grammarAccess.getTermAccess().getRightAssignment_1_0_2(), "rule__Term__RightAssignment_1_0_2");
			builder.put(grammarAccess.getTermAccess().getRightAssignment_1_1_2(), "rule__Term__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExternalContentAccess().getNameAssignment_0(), "rule__ExternalContent__NameAssignment_0");
			builder.put(grammarAccess.getExternalContentAccess().getParenAssignment_2_0(), "rule__ExternalContent__ParenAssignment_2_0");
			builder.put(grammarAccess.getExternalContentAccess().getParenAssignment_2_1_1(), "rule__ExternalContent__ParenAssignment_2_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_0_1(), "rule__Primary__ValueAssignment_0_1");
			builder.put(grammarAccess.getParenthesisAccess().getParenAssignment_2(), "rule__Parenthesis__ParenAssignment_2");
			builder.put(grammarAccess.getVariableUseAccess().getRefAssignment(), "rule__VariableUse__RefAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MathGrammarAccess grammarAccess;

	@Override
	protected InternalMathParser createParser() {
		InternalMathParser result = new InternalMathParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MathGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MathGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
