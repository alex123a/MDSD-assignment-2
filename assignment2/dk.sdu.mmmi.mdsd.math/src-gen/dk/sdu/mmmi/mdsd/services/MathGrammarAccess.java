/*
 * generated by Xtext 2.33.0
 */
package dk.sdu.mmmi.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MathExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.MathExp");
		private final Assignment cExpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_0 = (RuleCall)cExpAssignment.eContents().get(0);
		
		//MathExp: exp=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//exp=Exp
		public Assignment getExpAssignment() { return cExpAssignment; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_0() { return cExpExpParserRuleCall_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Exp");
		private final RuleCall cVarParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Exp: Var;
		@Override public ParserRule getRule() { return rule; }
		
		//Var
		public RuleCall getVarParserRuleCall() { return cVarParserRuleCall; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cVarLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVarKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cSpaceEqualsSignSpaceKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cRightVarParserRuleCall_1_0_4_0 = (RuleCall)cRightAssignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cLetLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLetKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_1_2_0 = (RuleCall)cNameAssignment_1_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_1_3 = (Alternatives)cGroup_1_1.eContents().get(3);
		private final Keyword cSpaceEqualsSignSpaceKeyword_1_1_3_0 = (Keyword)cAlternatives_1_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_3_1 = (Keyword)cAlternatives_1_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cRightPlusMinusParserRuleCall_1_1_4_0 = (RuleCall)cRightAssignment_1_1_4.eContents().get(0);
		
		//Var returns Exp:
		//    PlusMinus (
		//        ({Var.left=current} 'var ' name=ID ' = ' right=Var) |
		//        ({Let.left=current} 'let ' name=ID (' = ' | '=') right=PlusMinus)
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusMinus (
		//    ({Var.left=current} 'var ' name=ID ' = ' right=Var) |
		//    ({Let.left=current} 'let ' name=ID (' = ' | '=') right=PlusMinus)
		//)
		public Group getGroup() { return cGroup; }
		
		//PlusMinus
		public RuleCall getPlusMinusParserRuleCall_0() { return cPlusMinusParserRuleCall_0; }
		
		//(
		//       ({Var.left=current} 'var ' name=ID ' = ' right=Var) |
		//       ({Let.left=current} 'let ' name=ID (' = ' | '=') right=PlusMinus)
		//   )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({Var.left=current} 'var ' name=ID ' = ' right=Var)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Var.left=current}
		public Action getVarLeftAction_1_0_0() { return cVarLeftAction_1_0_0; }
		
		//'var '
		public Keyword getVarKeyword_1_0_1() { return cVarKeyword_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_2_0() { return cNameIDTerminalRuleCall_1_0_2_0; }
		
		//' = '
		public Keyword getSpaceEqualsSignSpaceKeyword_1_0_3() { return cSpaceEqualsSignSpaceKeyword_1_0_3; }
		
		//right=Var
		public Assignment getRightAssignment_1_0_4() { return cRightAssignment_1_0_4; }
		
		//Var
		public RuleCall getRightVarParserRuleCall_1_0_4_0() { return cRightVarParserRuleCall_1_0_4_0; }
		
		//({Let.left=current} 'let ' name=ID (' = ' | '=') right=PlusMinus)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Let.left=current}
		public Action getLetLeftAction_1_1_0() { return cLetLeftAction_1_1_0; }
		
		//'let '
		public Keyword getLetKeyword_1_1_1() { return cLetKeyword_1_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_1_2() { return cNameAssignment_1_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_2_0() { return cNameIDTerminalRuleCall_1_1_2_0; }
		
		//(' = ' | '=')
		public Alternatives getAlternatives_1_1_3() { return cAlternatives_1_1_3; }
		
		//' = '
		public Keyword getSpaceEqualsSignSpaceKeyword_1_1_3_0() { return cSpaceEqualsSignSpaceKeyword_1_1_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_3_1() { return cEqualsSignKeyword_1_1_3_1; }
		
		//right=PlusMinus
		public Assignment getRightAssignment_1_1_4() { return cRightAssignment_1_1_4; }
		
		//PlusMinus
		public RuleCall getRightPlusMinusParserRuleCall_1_1_4_0() { return cRightPlusMinusParserRuleCall_1_1_4_0; }
	}
	public class PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.PlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cMinusLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//PlusMinus returns Exp:
		//    Term (
		//        ({Plus.left=current} '+' right=Term |
		//        {Minus.left=current} '-' right=Term
		//        )
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Term (
		//    ({Plus.left=current} '+' right=Term |
		//    {Minus.left=current} '-' right=Term
		//    )
		//)*
		public Group getGroup() { return cGroup; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//(
		//       ({Plus.left=current} '+' right=Term |
		//       {Minus.left=current} '-' right=Term
		//       )
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Plus.left=current} '+' right=Term
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0() { return cPlusLeftAction_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//right=Term
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Term
		public RuleCall getRightTermParserRuleCall_1_0_2_0() { return cRightTermParserRuleCall_1_0_2_0; }
		
		//{Minus.left=current} '-' right=Term
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_1_0() { return cMinusLeftAction_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=Term
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Term
		public RuleCall getRightTermParserRuleCall_1_1_2_0() { return cRightTermParserRuleCall_1_1_2_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cMultLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cDivLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Term returns Exp:
		//    Primary (
		//        ({Mult.left=current} '*' right=Primary |
		//        {Div.left=current} '/' right=Primary
		//        )
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (
		//    ({Mult.left=current} '*' right=Primary |
		//    {Div.left=current} '/' right=Primary
		//    )
		//)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(
		//       ({Mult.left=current} '*' right=Primary |
		//       {Div.left=current} '/' right=Primary
		//       )
		//   )*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Mult.left=current} '*' right=Primary
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0() { return cMultLeftAction_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_0_2_0() { return cRightPrimaryParserRuleCall_1_0_2_0; }
		
		//{Div.left=current} '/' right=Primary
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_1_0() { return cDivLeftAction_1_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_2_0() { return cRightPrimaryParserRuleCall_1_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMyNumberAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary returns Exp: {MyNumber} value=INT | '(' Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{MyNumber} value=INT | '(' Exp ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{MyNumber} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{MyNumber}
		public Action getMyNumberAction_0_0() { return cMyNumberAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//'(' Exp ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1_1() { return cExpParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private final MathExpElements pMathExp;
	private final ExpElements pExp;
	private final VarElements pVar;
	private final PlusMinusElements pPlusMinus;
	private final TermElements pTerm;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMathExp = new MathExpElements();
		this.pExp = new ExpElements();
		this.pVar = new VarElements();
		this.pPlusMinus = new PlusMinusElements();
		this.pTerm = new TermElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.Math".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MathExp: exp=Exp;
	public MathExpElements getMathExpAccess() {
		return pMathExp;
	}
	
	public ParserRule getMathExpRule() {
		return getMathExpAccess().getRule();
	}
	
	//Exp: Var;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Var returns Exp:
	//    PlusMinus (
	//        ({Var.left=current} 'var ' name=ID ' = ' right=Var) |
	//        ({Let.left=current} 'let ' name=ID (' = ' | '=') right=PlusMinus)
	//    )
	//;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//PlusMinus returns Exp:
	//    Term (
	//        ({Plus.left=current} '+' right=Term |
	//        {Minus.left=current} '-' right=Term
	//        )
	//    )*
	//;
	public PlusMinusElements getPlusMinusAccess() {
		return pPlusMinus;
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}
	
	//Term returns Exp:
	//    Primary (
	//        ({Mult.left=current} '*' right=Primary |
	//        {Div.left=current} '/' right=Primary
	//        )
	//    )*
	//;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Primary returns Exp: {MyNumber} value=INT | '(' Exp ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
